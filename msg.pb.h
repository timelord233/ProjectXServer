// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_INCLUDED_msg_2eproto
#define PROTOBUF_INCLUDED_msg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_msg_2eproto 

namespace protobuf_msg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_msg_2eproto
namespace ProjectX {
class login;
class loginDefaultTypeInternal;
extern loginDefaultTypeInternal _login_default_instance_;
class match;
class matchDefaultTypeInternal;
extern matchDefaultTypeInternal _match_default_instance_;
class player;
class playerDefaultTypeInternal;
extern playerDefaultTypeInternal _player_default_instance_;
class server;
class serverDefaultTypeInternal;
extern serverDefaultTypeInternal _server_default_instance_;
}  // namespace ProjectX
namespace google {
namespace protobuf {
template<> ::ProjectX::login* Arena::CreateMaybeMessage<::ProjectX::login>(Arena*);
template<> ::ProjectX::match* Arena::CreateMaybeMessage<::ProjectX::match>(Arena*);
template<> ::ProjectX::player* Arena::CreateMaybeMessage<::ProjectX::player>(Arena*);
template<> ::ProjectX::server* Arena::CreateMaybeMessage<::ProjectX::server>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProjectX {

// ===================================================================

class login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProjectX.login) */ {
 public:
  login();
  virtual ~login();

  login(const login& from);

  inline login& operator=(const login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  login(login&& from) noexcept
    : login() {
    *this = ::std::move(from);
  }

  inline login& operator=(login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const login* internal_default_instance() {
    return reinterpret_cast<const login*>(
               &_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(login* other);
  friend void swap(login& a, login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline login* New() const final {
    return CreateMaybeMessage<login>(NULL);
  }

  login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const login& from);
  void MergeFrom(const login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ProjectX.login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProjectX.player) */ {
 public:
  player();
  virtual ~player();

  player(const player& from);

  inline player& operator=(const player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  player(player&& from) noexcept
    : player() {
    *this = ::std::move(from);
  }

  inline player& operator=(player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player* internal_default_instance() {
    return reinterpret_cast<const player*>(
               &_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(player* other);
  friend void swap(player& a, player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline player* New() const final {
    return CreateMaybeMessage<player>(NULL);
  }

  player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const player& from);
  void MergeFrom(const player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ue4server = 3;
  void clear_ue4server();
  static const int kUe4ServerFieldNumber = 3;
  const ::std::string& ue4server() const;
  void set_ue4server(const ::std::string& value);
  #if LANG_CXX11
  void set_ue4server(::std::string&& value);
  #endif
  void set_ue4server(const char* value);
  void set_ue4server(const char* value, size_t size);
  ::std::string* mutable_ue4server();
  ::std::string* release_ue4server();
  void set_allocated_ue4server(::std::string* ue4server);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProjectX.player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ue4server_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class server : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProjectX.server) */ {
 public:
  server();
  virtual ~server();

  server(const server& from);

  inline server& operator=(const server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  server(server&& from) noexcept
    : server() {
    *this = ::std::move(from);
  }

  inline server& operator=(server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server* internal_default_instance() {
    return reinterpret_cast<const server*>(
               &_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(server* other);
  friend void swap(server& a, server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline server* New() const final {
    return CreateMaybeMessage<server>(NULL);
  }

  server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const server& from);
  void MergeFrom(const server& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:ProjectX.server)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class match : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProjectX.match) */ {
 public:
  match();
  virtual ~match();

  match(const match& from);

  inline match& operator=(const match& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  match(match&& from) noexcept
    : match() {
    *this = ::std::move(from);
  }

  inline match& operator=(match&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const match& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const match* internal_default_instance() {
    return reinterpret_cast<const match*>(
               &_match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(match* other);
  friend void swap(match& a, match& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline match* New() const final {
    return CreateMaybeMessage<match>(NULL);
  }

  match* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<match>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const match& from);
  void MergeFrom(const match& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProjectX.match)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_msg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login

// string username = 1;
inline void login::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login::username() const {
  // @@protoc_insertion_point(field_get:ProjectX.login.username)
  return username_.GetNoArena();
}
inline void login::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectX.login.username)
}
#if LANG_CXX11
inline void login::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectX.login.username)
}
#endif
inline void login::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectX.login.username)
}
inline void login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectX.login.username)
}
inline ::std::string* login::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:ProjectX.login.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login::release_username() {
  // @@protoc_insertion_point(field_release:ProjectX.login.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ProjectX.login.username)
}

// string password = 2;
inline void login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& login::password() const {
  // @@protoc_insertion_point(field_get:ProjectX.login.password)
  return password_.GetNoArena();
}
inline void login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectX.login.password)
}
#if LANG_CXX11
inline void login::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectX.login.password)
}
#endif
inline void login::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectX.login.password)
}
inline void login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectX.login.password)
}
inline ::std::string* login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:ProjectX.login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* login::release_password() {
  // @@protoc_insertion_point(field_release:ProjectX.login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ProjectX.login.password)
}

// -------------------------------------------------------------------

// player

// int32 type = 1;
inline void player::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 player::type() const {
  // @@protoc_insertion_point(field_get:ProjectX.player.type)
  return type_;
}
inline void player::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ProjectX.player.type)
}

// int32 uid = 2;
inline void player::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 player::uid() const {
  // @@protoc_insertion_point(field_get:ProjectX.player.uid)
  return uid_;
}
inline void player::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:ProjectX.player.uid)
}

// string ue4server = 3;
inline void player::clear_ue4server() {
  ue4server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& player::ue4server() const {
  // @@protoc_insertion_point(field_get:ProjectX.player.ue4server)
  return ue4server_.GetNoArena();
}
inline void player::set_ue4server(const ::std::string& value) {
  
  ue4server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectX.player.ue4server)
}
#if LANG_CXX11
inline void player::set_ue4server(::std::string&& value) {
  
  ue4server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectX.player.ue4server)
}
#endif
inline void player::set_ue4server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ue4server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectX.player.ue4server)
}
inline void player::set_ue4server(const char* value, size_t size) {
  
  ue4server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectX.player.ue4server)
}
inline ::std::string* player::mutable_ue4server() {
  
  // @@protoc_insertion_point(field_mutable:ProjectX.player.ue4server)
  return ue4server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* player::release_ue4server() {
  // @@protoc_insertion_point(field_release:ProjectX.player.ue4server)
  
  return ue4server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void player::set_allocated_ue4server(::std::string* ue4server) {
  if (ue4server != NULL) {
    
  } else {
    
  }
  ue4server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ue4server);
  // @@protoc_insertion_point(field_set_allocated:ProjectX.player.ue4server)
}

// int32 port = 4;
inline void player::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 player::port() const {
  // @@protoc_insertion_point(field_get:ProjectX.player.port)
  return port_;
}
inline void player::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ProjectX.player.port)
}

// -------------------------------------------------------------------

// server

// string ip = 1;
inline void server::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& server::ip() const {
  // @@protoc_insertion_point(field_get:ProjectX.server.ip)
  return ip_.GetNoArena();
}
inline void server::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectX.server.ip)
}
#if LANG_CXX11
inline void server::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProjectX.server.ip)
}
#endif
inline void server::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectX.server.ip)
}
inline void server::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectX.server.ip)
}
inline ::std::string* server::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:ProjectX.server.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* server::release_ip() {
  // @@protoc_insertion_point(field_release:ProjectX.server.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void server::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ProjectX.server.ip)
}

// -------------------------------------------------------------------

// match

// int32 type = 1;
inline void match::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 match::type() const {
  // @@protoc_insertion_point(field_get:ProjectX.match.type)
  return type_;
}
inline void match::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ProjectX.match.type)
}

// int32 playerid = 2;
inline void match::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 match::playerid() const {
  // @@protoc_insertion_point(field_get:ProjectX.match.playerid)
  return playerid_;
}
inline void match::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ProjectX.match.playerid)
}

// int32 port = 3;
inline void match::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 match::port() const {
  // @@protoc_insertion_point(field_get:ProjectX.match.port)
  return port_;
}
inline void match::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ProjectX.match.port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProjectX

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_msg_2eproto
